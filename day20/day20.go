package day20

import (
	"fmt"
	"strings"
)

type point struct {
	x, y                     int
	north, south, east, west *point
	levelShift               map[*point]int
	distances                []int
}

func (p *point) mapKey() string {
	return fmt.Sprintf("%d|%d", p.x, p.y)
}

func (p *point) String() string {
	var builder strings.Builder
	builder.WriteString(fmt.Sprintf("x: %d\n", p.x))
	builder.WriteString(fmt.Sprintf("y: %d\n", p.y))
	builder.WriteString(fmt.Sprintf("distances: %d\n", p.distances))
	if p.north != nil {
		builder.WriteString(fmt.Sprintf("north: (%d,%d)\n", p.north.x, p.north.y))
	}
	if p.south != nil {
		builder.WriteString(fmt.Sprintf("south: (%d,%d)\n", p.south.x, p.south.y))
	}
	if p.east != nil {
		builder.WriteString(fmt.Sprintf("east: (%d,%d)\n", p.east.x, p.east.y))
	}
	if p.west != nil {
		builder.WriteString(fmt.Sprintf("west: (%d,%d)\n", p.west.x, p.west.y))
	}
	return builder.String()
}

//DoTheThing that day 20 is supposed to do
func DoTheThing() {
	input := `                                         U     I     L           T     D     G                                             
                                         T     Z     X           A     Z     G                                             
  #######################################.#####.#####.###########.#####.#####.###########################################  
  #...#.....#.......#.#.#...#.#.#.#.....#...#.....#.......#.........#.......#.#...#.............#...#...#...........#...#  
  ###.###.#######.###.#.#.###.#.#.###.#.###.#.#.#######.#####.#.###.#####.###.###.#.###############.#.#####.###.#######.#  
  #.....#...........................#.#.....#.#...#.....#.....#.#.#.#.......#.#.#.......#.#.....#.....#...#.#.#.#.#.....#  
  ###.###.#.#.#####.###.###.###.#####.#######.#####.#.###.#.#.###.#.#######.#.###.#.#####.###.###.#######.###.#.#.###.#.#  
  #.#...#.#.#.#.....#.#.#...#.........#.....#.....#.#.#.#.#.#...#...#.....#.#.....#.......#...#.#.#.....#.#...#...#...#.#  
  #.#.#############.#.#.###.#.#######.#.#.#.###.###.#.#.###.#######.#.###.#.#######.#########.#.#.#.#####.###.#.#.###.###  
  #.#.#.#.#.#.#.......#.#...#.#.........#.#.#...#.#.#...#...#...#...#...#.#.#...........................#.#.....#.......#  
  #.#.#.#.#.#.###.#.#.#####.###.#.###.###.###.#.#.#####.#######.###.#.#.#.#.#####.#####.###.#.###.#####.#.#.###########.#  
  #.....#...#.#.#.#.#.#.....#.#.#.#...#.....#.#.#.#...#.#.........#.#.#.#.....#.....#.....#.#.#.#...#.............#.#...#  
  ###.###.###.#.#############.###.#######.#####.#.#.###.###.#.#.#.#.#.#.#.###.###.#############.###.###.#.#.###.###.#####  
  #.........#...#.....#.........#.#.....#.....#.....#.....#.#.#.#...#.#.#...#.#...........#.......#...#.#.#.#.#.......#.#  
  ###.#######.#####.#####.#.###.#######.#.#.#####.#.###.###########.#.#.###.#####.#########.#########.#####.#.#.#######.#  
  #.#.#.#.....#...#...#...#...#.#.#.....#.#...#.#.#.#...#.#...#.#...#.#...#.#.#.#.#.#.#.#.#...#.#...#...#...#.#...#.....#  
  #.#.#.###.#.###.#.###########.#.#####.###.###.#.###.###.#.###.###.#.#######.#.#.#.#.#.#.#.###.#.#####.###.#.#.###.#####  
  #.#.....#.#.........#.#...#.......#.......#.......#.....#.....#.#.#...#...#.........#.........#.#.#.#.#.....#.#.#.....#  
  #.#.#########.#.#####.#.#.#####.###.###.#.#######.#.#.#####.#.#.#.###.###.#######.#####.#####.#.#.#.#####.#####.###.#.#  
  #.........#...#.#...#...#.....#.....#...#.....#...#.#...#.#.#.#.#.#.......#...#...#.#...#...............#...#...#.#.#.#  
  ###.###.#######.#.#.#########.#.###.#.###########.###.###.#.#.###.#.#.#.#.###.###.#.###.###.#.#.#.#.###########.#.###.#  
  #.....#...#.....#.#.#.#.........#...#.#...#.......#.#.#...#.#.....#.#.#.#.#.#.#.....#.....#.#.#.#.#...#...#.#...#.#...#  
  ###.###.#####.#.#.###.#############.#####.###.###.#.#.###.#.###.#.#.###.###.#.#.###.###.#.###.#########.###.###.#.#.#.#  
  #.....#.#.#.#.#.#.....#...#.#...#.#.#.#.......#...#...#...#...#.#.#...#.#.........#.#...#...#.#.......#.#.......#.#.#.#  
  ###.###.#.#.###.###.###.#.#.###.#.#.#.#########.#####.#.#.#.#.#####.#####.#.###.#####.#.#######.#######.###.#.###.#.###  
  #.....#.#...#...#.#.#.#.#...#.............#.#.....#...#.#.#.#.#.........#.#...#...#.#.#.........#.....#...#.#.........#  
  ###.#######.###.#.#.#.#####.#####.###.#.###.#.###.#.###.#.###.#####.#######.#.###.#.#.#######.#.#####.#.#####.#########  
  #.......#...#...#.#...#.....#.#.#.#...#.#.#...#...#.....#.#.....#.....#.#...#.#.............#.#...#...#...#.........#.#  
  #.#.###.###.#.#.#.###.#.###.#.#.#####.###.#######.#######.#.###.###.###.#######.###.###.#########.###.#.#####.###.###.#  
  #.#...#.#...#.#.......#.#.#.....#...#.#...#.........#.....#...#.#.......#.........#...#.....#.#.#.#.#.#.#.#.#...#.....#  
  #.###.###.#######.###.###.#.#####.###.#.#########.###.#####.#######.#.#######.###.#######.###.#.###.#.#.#.#.#.#########  
  #.#.......#...#.#.#.#.....#.....#...#.....#.#.....#...#.#.#.....#.#.#...#.#...#.......#.#.........#.........#...#...#.#  
  ###.#########.#.###.###.#.###.###.###.#####.###.#####.#.#.###.###.#.#####.#######.###.#.#####.#.###.###.#####.#.###.#.#  
  #...#.....#...........#.#...#...#.......#.........#.......#.......#...........#...#.........#.#.#.#.#...#...#.#.#.....#  
  ###.#.#######.#####.#####.###.#######.#########.#######.###.#######.###########.#######.#######.#.#####.#.#.#.###.#####  
  #.#...#...#.#.#.........#...#...#    D         Z       L   D       H           N      #...#...#.#.#.....#.#.#.....#.#.#  
  #.###.###.#.###.#####.#####.#.#.#    Z         O       M   Q       T           J      #######.###.#####.#.###.#####.#.#  
  #.......#.#.#.#.#.#.....#.#...#.#                                                     #...#.........#...#.......#.#.#.#  
  ###.#####.#.#.###.###.###.#.###.#                                                     #.#.#.###########.###.#####.#.#.#  
  #...#.....#...#...#.......#.#.#.#                                                   CQ..#.#.....#.#.#...........#.....#  
  ###.#####.#.#####.###.#.###.#.###                                                     #.###.###.#.#.#.#########.###.#.#  
  #.....................#.#.....#.#                                                     #...#.#.#.#.........#...#...#.#..OS
  ###.#.#.#.#.#.#######.#####.#.#.#                                                     #.###.#.#########.#.#.#.###.#.###  
  #...#.#.#.#.#...#.......#...#.#..OS                                                   #...#.#.#...#...#.#...#.#.#.#...#  
  #.#####.#.#######.#.#####.#.#.#.#                                                     #.###.#.###.###########.#.#.#.###  
  #.#.#...#.#.#.#.#.#.#.#.#.#.#...#                                                     #.........................#.....#  
  #.#.#######.#.#.###.###.###.#####                                                     #################################  
NJ..........#.....#.#.........#.#.#                                                     #...#...............#.#.....#...#  
  #############.###.###########.#.#                                                     #.#.#.#.#.###.###.###.###.#.#.#.#  
  #.......#.....#...........#......RW                                                   #.#...#.#.#.....#.......#.#...#.#  
  #.#####.#.###.#.#####.###.#.#.###                                                     #.#.#.###.###.###.#####.#.#.###.#  
  #...#...#...#.#.#.#...#.....#...#                                                     #.#.#.#.#.#...#...#.#...#.#...#..WL
  ###.#.###.###.#.###.###.#########                                                     #.#####.#####.#.###.#.#.#.#.###.#  
  #.#.#.....#...#...#.#.....#...#.#                                                   VO....#.#.......#.#...#.#...#.#.#.#  
  #.#.#.#.###.#####.###.#.###.###.#                                                     ###.#.#######.#.###.###.#####.###  
HD....#.#.#.#.........#.#.#.#.....#                                                     #.....#.#.#...#.#.#...#.#.....#.#  
  #########.###############.###.###                                                     ###.#.#.#.#######.#.#######.#.#.#  
  #...#.#.............#.......#...#                                                     #...#...#.#.....#.#...#.#...#....KW
  #.#.#.#.#.#.#.#.###.#####.#.#.#.#                                                     #########.#.#####.#.###.#.###.###  
  #.#...#.#.#.#.#.#.....#...#.#.#.#                                                   SB....#.#...#...#.#.....#.#...#...#  
  #.#.###.###.###.#####.#.###.#.#.#                                                     #.#.#.#.###.###.#.#.###.#.###.###  
  #.#.#.....#.#.#.#.#...#...#...#.#                                                     #.#...............#.......#...#.#  
  #.#.###.#.#.#.###.###.#.###.###.#                                                     #####.#.#.###.#.###.###########.#  
SN..#.....#.#.#.#.#.#.#...#.#.#....AR                                                   #.#...#.#.#...#...#.#.........#..HT
  #.#.#########.#.#.#.#####.#######                                                     #.#####.###.#.#######.#######.#.#  
  #.#.....#.......................#                                                     #...#.#.#...#...#.#.......#...#.#  
  #########.#######.#.#####.###.###                                                     ###.#.#.#########.#####.#.#.###.#  
VO..#.#.#.......#.#.#...#...#...#..TA                                                 XM....#.#.#.....#.......#.#.#.#....ZZ
  #.#.#.#######.#.#.#.#########.#.#                                                     #.###.#####.#####.#.#.###.#.###.#  
  #...........#...#.#...#.........#                                                     #.................#.#.....#.....#  
  ###.#.#.#######.#####.###.#.###.#                                                     #################################  
  #.#.#.#.........#.#.#.#...#...#.#                                                     #.......#...........#............LM
  #.###############.#.#############                                                     #.###.#.#.###.#.###.###.#########  
  #...................#...#...#.#.#                                                   IZ....#.#...#...#...#...#.......#.#  
  ###.#.#.###.#.#.###.###.#.#.#.#.#                                                     #.#######.###########.#.#####.#.#  
  #.#.#.#...#.#.#.#.....#...#.#....GG                                                   #.#.#.......#...#.....#.#.......#  
  #.###.#######.#.#####.#.###.#.###                                                     ###.###.###.###.#.#.#####.#####.#  
HR....#.....#.#.#.#...#.#.#.......#                                                     #.#...#.#.....#.#.#.......#.#...#  
  ###.###.#.#.#######.#.#.#.###.###                                                     #.###.#####.###.#########.#.#.#.#  
  #.......#.#.#.#.........#...#.#.#                                                     #.......#...#...........#...#.#.#  
  #.#.#.#.###.#.#########.#######.#                                                     #.#################.###.#######.#  
  #.#.#.#.#.#.#.#.#.........#......MJ                                                   #...#.........#...#...#.#.#...#.#  
  #########.#.#.#.#######.#####.###                                                     #.#####.#######.#####.#.#.#.#####  
OJ....#.#...........#.#...#.....#.#                                                   UT......#...#.#.#.#...#.#.#.....#..DQ
  #.###.#.#.#####.###.#####.###.#.#                                                     ###.###.###.#.#.#####.#.#.###.#.#  
AA........#...#.............#...#.#                                                     #.....................#...#.#...#  
  #########################.#####.#                                                     #########.#################.#.###  
  #.....................#.#.#...#.#                                                     #.....#...#...#.........#...#...#  
  ###.#.###.#.#.#.#####.#.#####.#.#                                                     #.###.###.#.#.#.#####.#.#.#.#####  
YX....#.#...#.#.#.#.#...#.#.#.#...#                                                     #...#...#.#.#.......#.#...#.#.#.#  
  #.#.###.#.###.###.#.###.#.#.###.#                                                     ###.#.#####.#.#######.#.###.#.#.#  
  #.#.#...#...#.#.....#.........#..KW                                                   #.#.#.....#.#...#.....#.#...#....XM
  ###.###.#####.###.#.#.###.#.###.#                                                     #.#.###.###.#######.#####.#.#.#.#  
  #...#.......#...#.#.....#.#.....#                                                   HR....#...........#.#.#.....#...#.#  
  #####.###.###.#######.#####.###.#                                                     #.#.###.#.###.###.#########.###.#  
  #.....#.....#.#.........#.....#.#                                                     #.#.#...#.#.........#.......#.#.#  
  #.#.#.###.#####.#.#.#.#####.#.###    L   W     H           S   H           Y     O    #.#####.###.#######.#######.#.#.#  
  #.#.#.#.....#...#.#.#.#.#...#.#.#    X   L     D           N   G           X     J    #...#...#.........#.#.#.#.....#.#  
  #.###.#.#.#####.###.###.#######.#####.###.#####.###########.###.###########.#####.#####.#######.#.#########.#.#.#.#.#.#  
  #...#.#.#...#.....#.......#.....#...........#.........#.#.#.#.#...#.........#.......#...#.......#.............#.#.#.#.#  
  #.#########.###.###.#.#########.#####.#############.###.#.#.#.#.#######.#.#.#.###.#.###.#####.#####.#.#.###.#.###.#.#.#  
  #.....#.#.#.#.....#.#.#.......#.#.#...#.#...#.......#.....#.#.#.....#...#.#.#.#...#...#...#.#.....#.#.#...#.#.#.#.#.#.#  
  #.#.###.#.#.###.###.#######.#.#.#.###.#.#.###.#.#.#.#.###.#.#.#.#######.#####.#############.#.#####.###.#.#.#.#.#.###.#  
  #.#.#.......#...#...#.#...#.#.............#.#.#.#.#.#.#...#...#...#.#...#.#.....#.#.#...#...#.#.....#...#.#.#.#...#...#  
  #.###.#.#####.#####.#.###.###############.#.#.#####.#.###.#.#####.#.#.###.###.###.#.#.###.#.#.#######.###.###.###.#####  
  #...#.#.#.#.....#.......#.......#.#.......#.......#.#...#.......#...#.#...#...............#.#.#...#.....#...#.#.......#  
  #.#.###.#.#.#####.#.#.###.###.#.#.###.###.#####.#.#.###.###########.#.#.#.###.###.#.#.#.#.#######.#.#.#########.#.###.#  
  #.#.#...#.....#...#.#...#.#.#.#.........#.#.....#.#.#.......#.#.#...#.#.#...#...#.#.#.#.#...#...#...#.........#.#...#.#  
  #.#####.###.###.###.#######.###.###.#.#######.#########.###.#.#.###.#.#.###.#######.#########.#####.#.#.#.#.###.#.#.#.#  
  #.#.....#.....#.#.....#...#.......#.#.....#.....#.#...#.#...#.......#...#.....#.#.#...#...........#.#.#.#.#...#.#.#.#.#  
  #.#.#.#.#####.#####.###.###.#.###.###.#####.###.#.###.###.###.###.###.###.###.#.#.#.###.###.###.#.#.###.#.#.#####.###.#  
  #.#.#.#...#...#.#.#.#...#.#.#.#.#.#.......#.#.....#.........#.#.....#.#.#.#...#.......#...#.#...#.#...#.#.#.....#.#.#.#  
  #.#.#.#.#.#####.#.#####.#.#####.###.#.#.#####.#####.#####.#######.#.###.#.#######.#.#.#.#######.#.###########.#####.#.#  
  #.#.#.#.#.#.....#...#.......#.....#.#.#.#...#.....#.#.......#.#.#.#...#.....#.#...#.#...#.#...#.#.#.....#.#.#...#.#...#  
  #.###.#.#######.###.#######.#####.###.###.###.#############.#.#.###.###.###.#.###.#######.#.#######.#.###.#.#####.###.#  
  #...#.#.#.............#.#...................#.....#.............#...#.#...#.#.#...#.....#.....#.....#.#.#.....#.#...#.#  
  ###.###########.#####.#.#######.#.###.###.#.###.#.#######.#.#.#####.#.#.###.#.#.#.###.###.#####.###.###.#.#####.#.###.#  
  #.......#.#.#.#.#.....#.#...#...#.#.....#.#.#...#.#.......#.#.#...#...#...#...#.#.#.......#.......#.#...#.#.#...#...#.#  
  #.#.#####.#.#.#####.#.#.#.###########.#######.#.#####.#####.#####.#.#######.#.###.#.#####.#.#.#.#######.#.#.#.###.#####  
  #.#.#.......#...#...#...#...#.#.........#.#...#.#...#.#.....#.....#.#.......#.#.........#...#.#...#.#.......#.........#  
  #.#######.#####.###.###.#.###.#######.#.#.#.#.###.#.#####.###.#.###.#####.#.#.#####.#####.#########.#.###.#.###.#####.#  
  #.#.........#.......#.............#.#.#...#.#.....#.#.....#...#.....#...#.#.#.#.#.#.#...#...#.......#.#...#.........#.#  
  #####.#.#######.#####.#.###.###.###.#.#.#####.#######.#.#.#.#.#####.#.#####.###.#.#.###.#####.#.###.#.###.#####.#.###.#  
  #.#...#.........#.#...#...#.#.#.#.#...#.#.......#.#...#.#.#.#.#...#.......#...#.............#.#.#.....#.....#...#...#.#  
  #.#.#####.#.#####.#.###.#####.#.#.#####.###.#.###.###.###.###.#.#.#########.#######.###.###.#.#####.#####.#######.#####  
  #...#.....#.#.......#...#.................#.#.#...#.#.#.....#...#...#.#.....#.#.#...#.....#.....#.#.#...#.......#.#.#.#  
  #####.#.#.#.#.#.#.###########.###.#.#.#######.###.#.#.#############.#.#####.#.#.###.#########.###.#####.#.#.#.#####.#.#  
  #.#.#.#.#.#.#.#.#.#.#.#.........#.#.#.#.#...#.......#...#.#...#.......#.#.#.#.....#...#.#.#...#.#.#.#.#.#.#.#.........#  
  #.#.#.###.#.###.###.#.#.#####.#.###.#.#.###.#######.###.#.#.#####.#####.#.#.#.#.###.#.#.#.###.#.#.#.#.#.###.###.###.###  
  #.....#...#.#...#.......#.....#...#.#.......#.......#.......#.....#.........#.#.....#.....#...............#...#.#.....#  
  #########################################.#.#.#############.###.#######.#####.#########################################  
                                           S R M             H   C       A     Z                                           
                                           B W J             G   Q       R     O                                           `
	lines := strings.Split(input, "\n")
	linesAsRunes := make([][]rune, 0)
	for _, line := range lines {
		linesAsRunes = append(linesAsRunes, []rune(line))
	}
	start, end, _ := parseMap(linesAsRunes)
	navigate(start, end, 0, 0)
	fmt.Println(end)

	start, end, _ = parseMap(linesAsRunes)
	navigate(start, end, 0, 40)
	fmt.Println(end)
}

func navigate(start, end *point, level, maxDepth int) {
	if start == end && level == 0 {
		return
	}
	if level > maxDepth {
		return
	}
	if start.north != nil {
		next := start.north
		levelShift, exists := start.levelShift[next]
		if !exists || maxDepth == 0 {
			levelShift = 0
		}
		tryNavigateNext(next, end, level+levelShift, start.distances[level]+1, maxDepth)
	}
	if start.south != nil {
		next := start.south
		levelShift, exists := start.levelShift[next]
		if !exists || maxDepth == 0 {
			levelShift = 0
		}
		tryNavigateNext(next, end, level+levelShift, start.distances[level]+1, maxDepth)
	}
	if start.east != nil {
		next := start.east
		levelShift, exists := start.levelShift[next]
		if !exists || maxDepth == 0 {
			levelShift = 0
		}
		tryNavigateNext(next, end, level+levelShift, start.distances[level]+1, maxDepth)
	}
	if start.west != nil {
		next := start.west
		levelShift, exists := start.levelShift[next]
		if !exists || maxDepth == 0 {
			levelShift = 0
		}
		tryNavigateNext(next, end, level+levelShift, start.distances[level]+1, maxDepth)
	}
}

func tryNavigateNext(next, end *point, level, distance, maxDepth int) {
	//wall
	if level < 0 {
		return
	}
	//make sure we can reason about distances
	if next.distances == nil {
		next.distances = make([]int, level+1)
	}
	if len(next.distances) < level+1 {
		temp := make([]int, level+1)
		copy(temp, next.distances)
		next.distances = temp
	}

	if next.distances[level] == 0 || next.distances[level] > distance {
		next.distances[level] = distance
		navigate(next, end, level, maxDepth)
	}
}

func parseMap(lines [][]rune) (*point, *point, map[string][]*point) {
	pointMap := make(map[string]*point)
	portals := make(map[string][]*point)
	//a dummy point we'll use when we discover portals
	portalPoint := point{x: -1, y: -1}
	y := 0

	//first run we'll just suss the portal situation
	for y < len(lines) {
		skipLine := false
		x := 0
		line := lines[y]
		for x < len(line) {
			char := line[x]
			skipRight := false
			//portal time!
			if isAlpha(char) {
				//look right
				var (
					p          point
					portalName string
				)

				if isAlpha(line[x+1]) {
					skipRight = true
					//a portal label reading left to right
					portalName = string(line[x : x+2])
					if x != 0 && line[x-1] == '.' {
						//the point is to the left of the label
						p = point{x: x - 1, y: y, east: &portalPoint}
					} else {
						//the point is to the right of the label
						p = point{x: x + 2, y: y, west: &portalPoint}
					}
				} else {
					skipLine = true
					//a portal label reading north to south
					portalName = string([]rune{line[x], lines[y+1][x]})
					if y != 0 && lines[y-1][x] == '.' {
						//the point is above the label
						p = point{x: x, y: y - 1, south: &portalPoint}
					} else {
						//the point is below the label
						p = point{x: x, y: y + 2, north: &portalPoint}
					}
				}

				portal, exists := portals[portalName]
				if exists {
					//if we've found a pair link them
					otherPoint := portal[0]
					pIsOutside := p.y == 2 || p.y == len(lines)-3 || p.x == 2 || p.x == len(line)-3
					//if p is inside, otherpoint is outside
					joinPoints(otherPoint, &p, true, !pIsOutside)
					portals[portalName] = append(portal, &p)
				} else {
					portals[portalName] = []*point{&p}
				}
				//add it to the list
				pointMap[p.mapKey()] = &p
			}

			if skipRight {
				x += 2
			} else {
				x++
			}

		}
		if skipLine {
			y += 2
		} else {
			y++
		}
	}
	//at this point we should have all the portals and the points next to them linked
	//we should also have AA and ZZ unlinked

	//now map out the rest
	y = 0
	for y < len(lines) {
		x := 0
		line := lines[y]
		for x < len(line) {
			if line[x] == '.' {
				tempPoint := point{x: x, y: y}
				mapKey := tempPoint.mapKey()
				//we may have already begun to process this point
				p, exists := pointMap[mapKey]
				if !exists {
					p = &tempPoint
					pointMap[mapKey] = p
				}

				//we only need to look east or south for points - north and west points are already mapped and linked
				if p.south == nil && lines[y+1][x] == '.' {
					tempSouth := point{x: x, y: y + 1}
					southKey := tempSouth.mapKey()
					south, exists := pointMap[southKey]
					if !exists {
						south = &tempSouth
						pointMap[southKey] = south
					}
					south.north = p
					p.south = south
				}

				if p.east == nil && lines[y][x+1] == '.' {
					tempEast := point{x: x + 1, y: y}
					eastKey := tempEast.mapKey()
					east, exists := pointMap[eastKey]
					if !exists {
						east = &tempEast
						pointMap[eastKey] = east
					}
					east.west = p
					p.east = east
				}
			}
			x++
		}
		y++
	}
	aa := portals["AA"][0]
	clearLink(aa, &portalPoint)
	aa.distances = make([]int, 1)
	zz := portals["ZZ"][0]
	clearLink(zz, &portalPoint)
	return aa, zz, portals
}

func isAlpha(char rune) bool {
	return char >= 'A' && char <= 'Z'
}

func joinPoints(a, b *point, recurse bool, aIsOutside bool) {
	//replace the dummy pont with the actual point
	switch {
	case a.north != nil:
		a.north = b
	case a.south != nil:
		a.south = b
	case a.east != nil:
		a.east = b
	case a.west != nil:
		a.west = b
	}
	if a.levelShift == nil {
		a.levelShift = make(map[*point]int)
	}
	if aIsOutside {
		a.levelShift[b] = -1
	} else {
		a.levelShift[b] = 1
	}

	if recurse {
		joinPoints(b, a, false, !aIsOutside)
	}
}

func clearLink(p, portalPoint *point) {
	switch {
	case p.north == portalPoint:
		p.north = nil
	case p.south == portalPoint:
		p.south = nil
	case p.east == portalPoint:
		p.east = nil
	case p.west == portalPoint:
		p.west = nil
	}
}
