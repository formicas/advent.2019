package day18

import (
	"container/heap"
	"fmt"
	"regexp"
	"strings"
)

type coordinate struct {
	x, y int
}

type pointOfInterest struct {
	key        rune
	name       string
	coords     coordinate
	neighbours []neighbour
}

type neighbour struct {
	poi          *pointOfInterest
	requiredKeys int
	distance     int
}

type state struct {
	currentKeys []rune
	poi         []*pointOfInterest
	keys        int
	distance    int
	index       int
}

func (s state) String() string {
	var builder strings.Builder
	for _, k := range s.currentKeys {
		builder.WriteString(string(k))
	}
	return fmt.Sprintf("%d{%v %d %d}", len(s.currentKeys), builder.String(), s.keys, s.distance)
}

func (s state) mapKey() string {
	var builder strings.Builder
	for _, k := range s.currentKeys {
		builder.WriteString(string(k))
	}
	return fmt.Sprintf("%v|%d", builder.String(), s.keys)
}
func (p *pointOfInterest) String() string {
	return fmt.Sprintf("%v", *p)
}

func (n neighbour) String() string {
	return fmt.Sprintf("{%v %v %d}", n.poi.name, n.requiredKeys, n.distance)
}

type priorityQueue []*state

func (pq priorityQueue) Len() int { return len(pq) }

func (pq priorityQueue) Less(i, j int) bool {
	// We want Pop to give us the highest, not lowest, priority so we use greater than here.
	return pq[i].distance < pq[j].distance
}

func (pq priorityQueue) Swap(i, j int) {
	pq[i], pq[j] = pq[j], pq[i]
	pq[i].index = i
	pq[j].index = j
}

func (pq *priorityQueue) Push(x interface{}) {
	n := len(*pq)
	item := x.(*state)
	item.index = n
	*pq = append(*pq, item)
}

func (pq *priorityQueue) Pop() interface{} {
	old := *pq
	n := len(old)
	item := old[n-1]
	old[n-1] = nil  // avoid memory leak
	item.index = -1 // for safety
	*pq = old[0 : n-1]
	return item
}

func (pq *priorityQueue) push(s *state) {
	heap.Push(pq, s)
}

func (pq *priorityQueue) pop() *state {
	return heap.Pop(pq).(*state)
}

var keyRegexp, doorRegexp, entranceRegexp *regexp.Regexp
var bestDistance int

//DoTheThing that day 18 is supposed to do
func DoTheThing() {
	mapDef := `#################################################################################
#...#.......#....a..#...........#..e....#.....#...#...#...........#.............#
#.#.#.#####.#.#####.#.#######.###.###.#.#.###.#.#.###.#.#########.#.###.#######.#
#.#.#.#.#...#.#.K...#...#...#.....#.#.#.#.#.....#.#...#t......#...#.#...#.......#
#.###B#.#.#.#.#.#######.###.#######.#.###.#######.#.#########.#.#####.###.#######
#.#q..#.#.#.#.#...#.....#...#.......#...#...#.#...#.........#.#.......#.#.#.....#
#.#.###.#.#.#.###.#.#####.#.#.#####.###.###.#.#.#####.#######.#########.#.###.#.#
#...#...#.#.#...#.#.......#...#.....#...#...#.........#.....#.......#.#...#m..#.#
#.#####.#.#####.#.#######.#########.#.###F#############.###.###.###.#.#.###.#####
#...#...#.......#.......#.#......h#.#...#.#.....#.......#.....#.#...#.#.#.......#
###.#.###########.#####.#.#.#####.#####.#.#.###.#.#####.#####.#.#.###G#.###.###.#
#.#.#.......#...#...#...#.#...J.#.#.....#.#...#.#.....#.#...#.#.#.#...#...#...#.#
#.#.#####.###.#.###.#####.#####.#.#.###.#.###.#.#####.#.#.#.#.###.#.#.###.#####S#
#w#...#...#...#...#...#...#...#.#...#...#.#...#.....#.#.#.#.#.....#.#...#.......#
#.###.#.###.#####.###.#.#####.#.#####.###.#.###.###.#.###.#.#######.###.#######.#
#...#...#...#.....#...#.#...#.#...#.#.#.#.#.#.#.#...#.....#...#...#.#.#.........#
#.#####.#.###.#####.###.#.#.#.###.#.#.#.#.#.#.#.###.#########.#.#.#.#.###########
#.......#...#.....#.#.....#...#.#.#...#.#...#.#...#.....#...#.#.#.#.....#.......#
#C#########.#####.#.#.#######.#.#.###.#.#.###.###.#####.#.###.#.#######.###.###.#
#.#.......#.#.#...#...#...#.....#...#...#.......#.#.....#.#...#.....#.#...#...#.#
#.###.#.#.#.#.#.###.###.#.#########.###.#####.###.#.#####.#.#####.#.#.###.###.###
#...#.#.#.#.#.#.#y..#...#...#.....#.#...#.....#...#.#.....#...#...#.....#...#...#
###.###.#I#.#.#.###########.#.###.#.#####.#####.###.#.###.#####.###########.#.#.#
#...#...#.#.#.#...........#...#...#.#...#...#...#.#...#...#.....#.........#.#.#.#
#.###.###.#.#.#####.###########.###.#.#.#####.###.#.#####.###.###.#######.#.###.#
#.....#...#...#...#.............#.....#.#.....#...#.#...#.....#...#.....#...#...#
#####.#######.#.#.###############.#####.#.#######.#.#.#.#####.#.###.###.#####.###
#.....#.....#...#.#...#.............#...#.......#...#.#.#.....#.#.#.#.#.........#
#.#####.###.#####.#.###.###########.#.###.#####.#####.#.#######.#.#.#.#########.#
#...#.#.#.#.......#...........#...#.#...#.....#.......#...#.....#...#.....#...#.#
###.#.#.#.###############.#####.#.#.###.#####.###########.#.#######.###.###.#.#.#
#...#.#...#.......#.....#.#.....#.#...#.#.....#...#.....#...#.....#.#...#...#...#
#.###.###.#.#####.#.###.###.#####.#####.#.#####.###.###.#####.###.#.#.###.#####.#
#.#.....#.#...#.....#...#...#.....#.....#...#.......#...#.....#.#.#...#...#.....#
#.###L#.#.#.#.#######.###.###.#####.###.###.#.#######.#.###.###.#.###.#.###.#####
#o..#.#.#.#.#.....#.#.#...#.#...#...#.#.#.#.#.....#...#.....#.#...#...#.#.......#
###.###.#.#######.#.#.#.#.#.###.#.###.#.#.#.#######.#########.#.#######.#######.#
#.#...#.#.......#.#.#.#.#.#.#...#.#...#.#.#.#...#...#.........#.#.....#.......#.#
#.###.#.#######.#.#.#.###.#.#.###.#.###.#.#.#.#.#.###.#######.#.#.###.#######.#.#
#.............#...#.......#.......#...........#...#.........#.....#...........#.#
#######################################.@.#######################################
#.....#.....#.#.........#.#...#.....#...........#..u........#...#.......#.....Q.#
#.#.###.#.#.#.#.#######.#.#.#.#.#.###.#.#.#.###.#.#########.###.#.#.###.#######.#
#.#.#...#.#.#.#.....#...#.R.#.#.#.....#.#.#...#...#.......#r....#.#...#.........#
#.#.#.###.#.#.#####.###.#####.#.#######.#.###.#######.###.#####.#.###.#####.#####
#.#...#...#.......#...#.....#.#.#.#...#.#.#.#...#...#.#...#.....#b#.#...#...#..c#
#.#####.#############.#####.#.#.#.#.#.#.#.#.###.#.#.#.#.###.#####.#.###.#####.#.#
#p#...V.#..x#.......#...#...#.....#.#...#.#...#.#.#...#...#.#.#...#...#.....#.#.#
###.#####.#.#.#####.###.#.###U#####.###.#.#.#.#.#.#######.#.#.#.###.#.#####.#.#.#
#...#.....#.....#...#...#.#.#.#.....#.#.#...#.#.#.#...#.#.#...#...#.#.....#...#.#
#.###.###########.###.###.#.#.#.#####.#.#.#####.#.#.#.#.#.###.###.#.#####.#####.#
#.......#.......#...#.#.#.#...#...#.....#.#...#.#.#.#.#...#...#.#.#.....#...#.#.#
#.#####.#.#####.###.#.#.#.#.#####.#######.#.#.#.#.#H#.###.#.###.#.#.###.###.#.#.#
#.#...#.#.#...#.....#.#...#.....#...#...#.#.#...#.#.#...#.#.....#.#...#.#.#...#.#
#.#.#.###.#.#######.#.###.#########.#.#.###.#####.#.###.###.#####.#####.#.###.#.#
#.#.#.....#...#.....#...#.#.......#...#.#...#.....#.#.#.....#...#.......#.....#.#
#.#.#########.#.#######.#.#.#####.#####.#.###.#.###.#.#######.#.#########.#####.#
#.#.........#.#.#.#.....#...#...#.....#.#...#.#.#.........#...#...#.....#...#...#
#.#########.#.#.#.#.#########.#.#####.#.#.#.#.###.#########.###.###.#.#####.#.#.#
#.#.......#.#.#...#.#.......#.#.....#.#.#.#.#.....#.#.........#.#...#.#.....#.#.#
#.#######.#.#.###.#.###.#####.#####.#.#.#.#.###.###.#.#########.#.###.#.#####.#.#
#......z..#.#.#...#...#.....#.#.....#.#.#.#...#.....#.......#.#.#.#.#...#...#.#.#
#########.#.#.#.#######.###.#.#.###.#.#.#.###.###########.###.#.#.#.#######.#.#.#
#.#.......#.#...#.....#.#.#.#.#.#...#.#.#.#.#.............#...#.#.......#...#.#.#
#.#.#######.#.###.#.#.#.#.#.#.#.#.###.#.#.#.###############.###.#######.#.###.#.#
#...#.......#...#.#.#.#...#...#.#...#.#.#....j#...#...#....d#...#...#...#...#.#.#
#.###.#########.###.#.###.#####.#####.#.#####.#.###.#.#.#######.#.#.#.#####.#.#.#
#...#.#.......#.#...#...#...#.#.....#...#...#.#.....#.#.Z.#.....#.#...#.....#.#.#
#D###.#####.###.#.#####.###.#.#####.###.###.#.#######.###.###.###.#######.###.#.#
#.#...#...#..n#...#.N.#.#...#.....#.....#...#.....#...#.#...#.....#.....#.#...#.#
###.###.#.###.#######.#.#.#####.#.#######.#######.#.#.#.###.#.#####.###.#.#.###W#
#...#...#.............#.#.....#.#.....M.#.#.......#.#...#...#.......#.....#...#.#
#.###.#.###############.#####.###.#####.#.#.#######.###.#.#######.#####.#####.#.#
#.#.P.#...#...#.......#.#...#.....#...#.#.#...#.....#...#...#.#...#...#.#.....#i#
#.#######.#.#.#.#####.#.#.#.#######.#.#.#.###.###.###.#####.#.#.###.#.###.#####.#
#.......#...#.......#...#.#.......#.#...#...#....f#.E.#...#.#.....#.#.#...#.O.#.#
#.#####.#################.###.#####.#####.#########.#####.#.#######X#.#.###.#.###
#.#.#...#...#...T...#.A.#...#..k..#.#...#.#...#...#.#...#.#.....#...#.#.....#...#
#.#.#.###.#.#.#####.#.#.###.#####.#.#.#.#.#.#.#.#.#.#.#.#.#####.#.###.#########.#
#...#.....#.......#...#.........#.Y...#.#..s#...#..g..#.......#v..#............l#
#################################################################################`

	lines := strings.Split(mapDef, "\n")

	//find points of interest
	var (
		origin pointOfInterest
	)
	keys := make([]*pointOfInterest, 0)
	keyRegexp = regexp.MustCompile("[a-z]")
	doorRegexp = regexp.MustCompile("[A-Z]")
	entranceRegexp = regexp.MustCompile("@")
	requiredKeys := 0

	for i, line := range lines {
		indexOfAt := strings.IndexRune(line, '@')
		if indexOfAt > 0 {
			origin = pointOfInterest{name: "entrance", coords: coordinate{x: indexOfAt, y: i}}
		}

		keysIndexes := keyRegexp.FindAllStringIndex(line, -1)
		if keysIndexes != nil {
			for _, index := range keysIndexes {
				poi := pointOfInterest{name: line[index[0]:index[1]], coords: coordinate{x: index[0], y: i}, key: rune(line[index[0]])}
				requiredKeys = requiredKeys | (1 << (poi.key - 'a'))
				keys = append(keys, &poi)
			}
		}
	}

	// for _, line := range lines {
	// 	fmt.Println(line)
	// }

	origin.neighbours = scoreDestinations(origin, lines, keys)
	for _, key := range keys {
		(*key).neighbours = scoreDestinations(*key, lines, keys)
	}

	originState := state{distance: 0, keys: 0, poi: []*pointOfInterest{&origin}, currentKeys: make([]rune, 1)}
	winningState := dijkstra(originState, requiredKeys)
	fmt.Printf("Shortest Path: %d\n", winningState.distance)

	mapDef = `#################################################################################
#...#.......#....a..#...........#..e....#.....#...#...#...........#.............#
#.#.#.#####.#.#####.#.#######.###.###.#.#.###.#.#.###.#.#########.#.###.#######.#
#.#.#.#.#...#.#.K...#...#...#.....#.#.#.#.#.....#.#...#t......#...#.#...#.......#
#.###B#.#.#.#.#.#######.###.#######.#.###.#######.#.#########.#.#####.###.#######
#.#q..#.#.#.#.#...#.....#...#.......#...#...#.#...#.........#.#.......#.#.#.....#
#.#.###.#.#.#.###.#.#####.#.#.#####.###.###.#.#.#####.#######.#########.#.###.#.#
#...#...#.#.#...#.#.......#...#.....#...#...#.........#.....#.......#.#...#m..#.#
#.#####.#.#####.#.#######.#########.#.###F#############.###.###.###.#.#.###.#####
#...#...#.......#.......#.#......h#.#...#.#.....#.......#.....#.#...#.#.#.......#
###.#.###########.#####.#.#.#####.#####.#.#.###.#.#####.#####.#.#.###G#.###.###.#
#.#.#.......#...#...#...#.#...J.#.#.....#.#...#.#.....#.#...#.#.#.#...#...#...#.#
#.#.#####.###.#.###.#####.#####.#.#.###.#.###.#.#####.#.#.#.#.###.#.#.###.#####S#
#w#...#...#...#...#...#...#...#.#...#...#.#...#.....#.#.#.#.#.....#.#...#.......#
#.###.#.###.#####.###.#.#####.#.#####.###.#.###.###.#.###.#.#######.###.#######.#
#...#...#...#.....#...#.#...#.#...#.#.#.#.#.#.#.#...#.....#...#...#.#.#.........#
#.#####.#.###.#####.###.#.#.#.###.#.#.#.#.#.#.#.###.#########.#.#.#.#.###########
#.......#...#.....#.#.....#...#.#.#...#.#...#.#...#.....#...#.#.#.#.....#.......#
#C#########.#####.#.#.#######.#.#.###.#.#.###.###.#####.#.###.#.#######.###.###.#
#.#.......#.#.#...#...#...#.....#...#...#.......#.#.....#.#...#.....#.#...#...#.#
#.###.#.#.#.#.#.###.###.#.#########.###.#####.###.#.#####.#.#####.#.#.###.###.###
#...#.#.#.#.#.#.#y..#...#...#.....#.#...#.....#...#.#.....#...#...#.....#...#...#
###.###.#I#.#.#.###########.#.###.#.#####.#####.###.#.###.#####.###########.#.#.#
#...#...#.#.#.#...........#...#...#.#...#...#...#.#...#...#.....#.........#.#.#.#
#.###.###.#.#.#####.###########.###.#.#.#####.###.#.#####.###.###.#######.#.###.#
#.....#...#...#...#.............#.....#.#.....#...#.#...#.....#...#.....#...#...#
#####.#######.#.#.###############.#####.#.#######.#.#.#.#####.#.###.###.#####.###
#.....#.....#...#.#...#.............#...#.......#...#.#.#.....#.#.#.#.#.........#
#.#####.###.#####.#.###.###########.#.###.#####.#####.#.#######.#.#.#.#########.#
#...#.#.#.#.......#...........#...#.#...#.....#.......#...#.....#...#.....#...#.#
###.#.#.#.###############.#####.#.#.###.#####.###########.#.#######.###.###.#.#.#
#...#.#...#.......#.....#.#.....#.#...#.#.....#...#.....#...#.....#.#...#...#...#
#.###.###.#.#####.#.###.###.#####.#####.#.#####.###.###.#####.###.#.#.###.#####.#
#.#.....#.#...#.....#...#...#.....#.....#...#.......#...#.....#.#.#...#...#.....#
#.###L#.#.#.#.#######.###.###.#####.###.###.#.#######.#.###.###.#.###.#.###.#####
#o..#.#.#.#.#.....#.#.#...#.#...#...#.#.#.#.#.....#...#.....#.#...#...#.#.......#
###.###.#.#######.#.#.#.#.#.###.#.###.#.#.#.#######.#########.#.#######.#######.#
#.#...#.#.......#.#.#.#.#.#.#...#.#...#.#.#.#...#...#.........#.#.....#.......#.#
#.###.#.#######.#.#.#.###.#.#.###.#.###.#.#.#.#.#.###.#######.#.#.###.#######.#.#
#.............#...#.......#.......#....@#@....#...#.........#.....#...........#.#
#################################################################################
#.....#.....#.#.........#.#...#.....#..@#@......#..u........#...#.......#.....Q.#
#.#.###.#.#.#.#.#######.#.#.#.#.#.###.#.#.#.###.#.#########.###.#.#.###.#######.#
#.#.#...#.#.#.#.....#...#.R.#.#.#.....#.#.#...#...#.......#r....#.#...#.........#
#.#.#.###.#.#.#####.###.#####.#.#######.#.###.#######.###.#####.#.###.#####.#####
#.#...#...#.......#...#.....#.#.#.#...#.#.#.#...#...#.#...#.....#b#.#...#...#..c#
#.#####.#############.#####.#.#.#.#.#.#.#.#.###.#.#.#.#.###.#####.#.###.#####.#.#
#p#...V.#..x#.......#...#...#.....#.#...#.#...#.#.#...#...#.#.#...#...#.....#.#.#
###.#####.#.#.#####.###.#.###U#####.###.#.#.#.#.#.#######.#.#.#.###.#.#####.#.#.#
#...#.....#.....#...#...#.#.#.#.....#.#.#...#.#.#.#...#.#.#...#...#.#.....#...#.#
#.###.###########.###.###.#.#.#.#####.#.#.#####.#.#.#.#.#.###.###.#.#####.#####.#
#.......#.......#...#.#.#.#...#...#.....#.#...#.#.#.#.#...#...#.#.#.....#...#.#.#
#.#####.#.#####.###.#.#.#.#.#####.#######.#.#.#.#.#H#.###.#.###.#.#.###.###.#.#.#
#.#...#.#.#...#.....#.#...#.....#...#...#.#.#...#.#.#...#.#.....#.#...#.#.#...#.#
#.#.#.###.#.#######.#.###.#########.#.#.###.#####.#.###.###.#####.#####.#.###.#.#
#.#.#.....#...#.....#...#.#.......#...#.#...#.....#.#.#.....#...#.......#.....#.#
#.#.#########.#.#######.#.#.#####.#####.#.###.#.###.#.#######.#.#########.#####.#
#.#.........#.#.#.#.....#...#...#.....#.#...#.#.#.........#...#...#.....#...#...#
#.#########.#.#.#.#.#########.#.#####.#.#.#.#.###.#########.###.###.#.#####.#.#.#
#.#.......#.#.#...#.#.......#.#.....#.#.#.#.#.....#.#.........#.#...#.#.....#.#.#
#.#######.#.#.###.#.###.#####.#####.#.#.#.#.###.###.#.#########.#.###.#.#####.#.#
#......z..#.#.#...#...#.....#.#.....#.#.#.#...#.....#.......#.#.#.#.#...#...#.#.#
#########.#.#.#.#######.###.#.#.###.#.#.#.###.###########.###.#.#.#.#######.#.#.#
#.#.......#.#...#.....#.#.#.#.#.#...#.#.#.#.#.............#...#.#.......#...#.#.#
#.#.#######.#.###.#.#.#.#.#.#.#.#.###.#.#.#.###############.###.#######.#.###.#.#
#...#.......#...#.#.#.#...#...#.#...#.#.#....j#...#...#....d#...#...#...#...#.#.#
#.###.#########.###.#.###.#####.#####.#.#####.#.###.#.#.#######.#.#.#.#####.#.#.#
#...#.#.......#.#...#...#...#.#.....#...#...#.#.....#.#.Z.#.....#.#...#.....#.#.#
#D###.#####.###.#.#####.###.#.#####.###.###.#.#######.###.###.###.#######.###.#.#
#.#...#...#..n#...#.N.#.#...#.....#.....#...#.....#...#.#...#.....#.....#.#...#.#
###.###.#.###.#######.#.#.#####.#.#######.#######.#.#.#.###.#.#####.###.#.#.###W#
#...#...#.............#.#.....#.#.....M.#.#.......#.#...#...#.......#.....#...#.#
#.###.#.###############.#####.###.#####.#.#.#######.###.#.#######.#####.#####.#.#
#.#.P.#...#...#.......#.#...#.....#...#.#.#...#.....#...#...#.#...#...#.#.....#i#
#.#######.#.#.#.#####.#.#.#.#######.#.#.#.###.###.###.#####.#.#.###.#.###.#####.#
#.......#...#.......#...#.#.......#.#...#...#....f#.E.#...#.#.....#.#.#...#.O.#.#
#.#####.#################.###.#####.#####.#########.#####.#.#######X#.#.###.#.###
#.#.#...#...#...T...#.A.#...#..k..#.#...#.#...#...#.#...#.#.....#...#.#.....#...#
#.#.#.###.#.#.#####.#.#.###.#####.#.#.#.#.#.#.#.#.#.#.#.#.#####.#.###.#########.#
#...#.....#.......#...#.........#.Y...#.#..s#...#..g..#.......#v..#............l#
#################################################################################`

	lines = strings.Split(mapDef, "\n")

	origins := make([]*pointOfInterest, 0)
	keys = make([]*pointOfInterest, 0)
	keyRegexp = regexp.MustCompile("[a-z]")
	doorRegexp = regexp.MustCompile("[A-Z]")
	requiredKeys = 0

	for i, line := range lines {
		entrancesIndexes := entranceRegexp.FindAllStringIndex(line, -1)
		if entrancesIndexes != nil {
			for _, index := range entrancesIndexes {
				poi := pointOfInterest{name: line[index[0]:index[1]], coords: coordinate{x: index[0], y: i}, key: '@'}
				origins = append(origins, &poi)
			}
		}

		keysIndexes := keyRegexp.FindAllStringIndex(line, -1)
		if keysIndexes != nil {
			for _, index := range keysIndexes {
				poi := pointOfInterest{name: line[index[0]:index[1]], coords: coordinate{x: index[0], y: i}, key: rune(line[index[0]])}
				requiredKeys = requiredKeys | (1 << (poi.key - 'a'))
				keys = append(keys, &poi)
			}
		}
	}

	for _, o := range origins {
		o.neighbours = scoreDestinations(*o, lines, keys)
	}
	for _, key := range keys {
		key.neighbours = scoreDestinations(*key, lines, keys)
	}

	originState = state{poi: origins, currentKeys: make([]rune, len(origins))}
	winningState = dijkstra(originState, requiredKeys)
	fmt.Printf("Shortest Path: %d\n", winningState.distance)

}

func scoreDestinations(origin pointOfInterest, lines []string, keys []*pointOfInterest) []neighbour {
	scores := make(map[coordinate]int)
	neighbourMap := make(map[rune]neighbour)
	requiredKeys := 0

	x := origin.coords.x
	y := origin.coords.y
	keyCount := len(keys)
	score := 0

	neighbourMap, scores = walk(lines, score+1, x-1, y, keyCount, neighbourMap, scores, requiredKeys, keys)
	neighbourMap, scores = walk(lines, score+1, x+1, y, keyCount, neighbourMap, scores, requiredKeys, keys)
	neighbourMap, scores = walk(lines, score+1, x, y-1, keyCount, neighbourMap, scores, requiredKeys, keys)
	neighbourMap, scores = walk(lines, score+1, x, y+1, keyCount, neighbourMap, scores, requiredKeys, keys)

	neighbours := make([]neighbour, 0)
	for _, v := range neighbourMap {
		neighbours = append(neighbours, v)
	}
	return neighbours
}

func dijkstra(startState state, allRequiredKeys int) state {
	seenStates := make(map[string]*state)
	pq := make(priorityQueue, 0)
	heap.Init(&pq)
	pq.push(&startState)

	for len(pq) > 0 {
		currentState := *(pq.pop())
		if currentState.keys == allRequiredKeys {
			return currentState
		}

		for i, p := range currentState.poi {
			for _, n := range p.neighbours {
				if hasKeys(n.requiredKeys, currentState.keys) && n.poi.key != p.key {
					nextPoi := make([]*pointOfInterest, len(currentState.poi))
					copy(nextPoi, currentState.poi)
					nextPoi[i] = n.poi

					nextKeys := make([]rune, len(currentState.currentKeys))
					copy(nextKeys, currentState.currentKeys)
					nextKeys[i] = (*n.poi).key
					nextState := state{keys: currentState.keys | (1 << (n.poi.key - 'a')), poi: nextPoi, currentKeys: nextKeys, distance: currentState.distance + n.distance}

					seenState, exists := seenStates[nextState.mapKey()]
					if exists {
						if nextState.distance < (*seenState).distance {
							heap.Remove(&pq, seenState.index)
							pq.push(&nextState)
							seenStates[nextState.mapKey()] = &nextState
						}
					} else {
						pq.push(&nextState)
						seenStates[nextState.mapKey()] = &nextState
					}
				}
			}
		}
	}
	return state{}
}

func hasKeys(requiredKeys, currentKeys int) bool {
	return requiredKeys&currentKeys == requiredKeys
}

func walk(lines []string, score, x, y, keyCount int, neighbours map[rune]neighbour, scores map[coordinate]int, requiredKeys int, keys []*pointOfInterest) (map[rune]neighbour, map[coordinate]int) {
	currentScore, exists := scores[coordinate{x: x, y: y}]
	//we've been here before and haven't found a more efficient path
	if exists && currentScore <= score {
		return neighbours, scores
	}
	scores[coordinate{x: x, y: y}] = score
	char := string(lines[y][x])
	//wall
	if char == "#" {
		return neighbours, scores
	}
	if doorRegexp.MatchString(char) {
		requiredKey := []rune(strings.ToLower(char))[0]
		requiredKeys = requiredKeys | (1 << (requiredKey - 'a'))
	}

	if keyRegexp.MatchString(char) {
		key := getKey(char, keys)
		n, exists := neighbours[rune(lines[y][x])]
		if !exists || n.distance > score {
			neighbours[rune(lines[y][x])] = neighbour{poi: key, requiredKeys: requiredKeys, distance: score}
		}
	}

	neighbours, scores = walk(lines, score+1, x-1, y, keyCount, neighbours, scores, requiredKeys, keys)
	neighbours, scores = walk(lines, score+1, x+1, y, keyCount, neighbours, scores, requiredKeys, keys)
	neighbours, scores = walk(lines, score+1, x, y-1, keyCount, neighbours, scores, requiredKeys, keys)
	neighbours, scores = walk(lines, score+1, x, y+1, keyCount, neighbours, scores, requiredKeys, keys)
	return neighbours, scores
}

func getKey(name string, keys []*pointOfInterest) *pointOfInterest {
	for _, key := range keys {
		if (*key).name == name {
			return key
		}
	}
	return nil
}
